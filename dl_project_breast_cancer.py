# -*- coding: utf-8 -*-
"""DL project - Breast Cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NuOnEON3wYn1n2-5n6kEOUO69VkeTNo
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split

breast_cancer_dataset = sklearn.datasets.load_breast_cancer()
print(breast_cancer_dataset)

data = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)
data.head()

data['label'] = breast_cancer_dataset.target
data.head()

data.shape

data.info()

data.isnull().sum()

data.describe()

data['label'].value_counts()

data.groupby('label').mean()

x=data.drop(columns='label', axis=1)
y=data['label']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scalar = StandardScaler()
x_train_std = scalar.fit_transform(x_train)
x_test_std = scalar.fit_transform(x_test)

import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

# setting up the layers of NT
model = keras.Sequential([
     keras.layers.Flatten(input_shape=(30,)),
     keras.layers.Dense(20, activation='relu'),
     keras.layers.Dense(2, activation = 'sigmoid')
])

model.compile(optimizer='adam',
              loss= 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

history =model.fit(x_train_std,y_train,validation_split=0.1, epochs=10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training data ','validation data'], loc='lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['training data ','validation data'], loc='upper right')

loss, accuracy = model.evaluate(x_test_std, y_test)
print(accuracy)

print(x_test_std.shape)
print(x_test_std[0])

y_pred=model.predict(x_test_std)

print(y_pred.shape)
print(y_pred[0])

my_list=[10,20,30]
index_of_max_value = np.argmax(my_list)
print(my_list)
print(index_of_max_value)

y_pred_labels = [np.argmax(i) for i in y_pred]
print(y_pred_labels)

input_data = (11.76,21.6,74.72,427.9,0.08637,0.04966,0.01657,0.01115,0.1495,0.05888,0.4062,1.21,2.635,28.47,0.005857,0.009758,0.01168,0.007445,0.02406,0.001769,12.98,25.72,82.98,516.5,0.1085,0.08615,0.05523,0.03715,0.2433,0.06563)

input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
input_data_std=scalar.transform(input_data_reshaped)
prediction = model.predict(input_data_std)
print(prediction)

prediction_label =[np.argmax(prediction)]
print(prediction_label)

if(prediction_label[0]==0):
  print("the tumer is Malignant")
else:
   print("the tumer is benign")

